#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <Servo.h> 
Servo myservo;  // create servo object to control a servo 
                // twelve servo objects can be created on most boards

// Update these with values suitable for your network.

const char* ssid = "maker";                    //wifi账号
const char* password = "swjtumaker";               //wifi密码
const char* mqtt_server = "test.mosquitto.org";

//15 red, 12 green ,13 blue.
int redpin = 15;
int greenpin = 12;
int bluepin = 13;

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;
void setup_wifi();
void callback(char* topic, byte* payload, unsigned int length);
void openlock();
void setup() {
    myservo.attach(4);  // attaches the servo on GIO2 to the servo object 
    pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
    pinMode(redpin, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
    pinMode(greenpin, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
    pinMode(bluepin, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
    Serial.begin(115200);
    setup_wifi();
    client.setServer(mqtt_server, 1883);
    client.setCallback(callback);
}

void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  //if (( ''==(char)payload[0]) && ('' == (char)payload[1]) && ('' == (char)payload[2])&& ('' == (char)payload[3])) {   //密码 
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
      digitalWrite(redpin, HIGH);   // Turn the LED on (Note that LOW is the voltage level
     digitalWrite(greenpin, LOW);       
      digitalWrite(bluepin, LOW);    
    // but actually the LED is on; this is because
    // it is acive low on the ESP-01)
    openlock();
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
    digitalWrite(redpin, LOW);   // Turn the LED on (Note that LOW is the voltage level
    digitalWrite(greenpin, HIGH);       
    digitalWrite(bluepin, LOW);    
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("ESP8266Client")) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outTopic", "hello world");
      // ... and resubscribe
      client.subscribe("Open");                                      //topic
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

 void openlock(){
  //pinMode(4, OUTPUT);
  int pos;
    for(pos = 0; pos <= 180; pos += 1) // goes from 0 degrees to 180 degrees 
    {                                  // in steps of 1 degree 
      myservo.write(pos);              // tell servo to go to position in variable 'pos' 
      delay(15);                       // waits 15ms for the servo to reach the position 
    } 
    for(pos = 180; pos>=0; pos-=1)     // goes from 180 degrees to 0 degrees 
    {                                
      myservo.write(pos);              // tell servo to go to position in variable 'pos' 
      delay(15);                       // waits 15ms for the servo to reach the position 
    } 
  //pinMode(4, INPUT);
 }
void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, 75, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outTopic", msg);
  }
}

